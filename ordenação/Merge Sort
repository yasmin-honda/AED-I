#include <stdio.h>

#include <stdlib.h>

#include <time.h>


void intercala(int inicio, int meio, int fim, int vetor[]) {

int i, j, k, *vt;


vt = (int*)malloc(sizeof(int) * (fim - inicio));
i = inicio;

j = meio;

k = 0;


while (i < meio && j < fim) {

if (vetor[i] < vetor[j]) {

vt[k++] = vetor[i++];

} else {

vt[k++] = vetor[j++];

}

}


while (i < meio) {

vt[k++] = vetor[i++];

}


while (j < fim) {

vt[k++] = vetor[j++];

}


for (i = inicio; i < fim; i++) {

vetor[i] = vt[i - inicio];
}
free(vt);

}


void mergeSort(int inicio, int fim, int vetor[]) {

if (inicio < fim - 1) {

int q = (inicio + fim)/2;


mergeSort(inicio, q, vetor);

mergeSort(q, fim, vetor);

intercala(inicio, q, fim, vetor);

}

}


int main() {

const int tamanho = 50000;

int i, j, k, contagem_execucoes = 3, contagem_escala = 8;

int vetor[tamanho * contagem_escala];

clock_t inicio, fim;

double tempo_gasto = 0, tempo_medio = 0;


srand(time(NULL));


for (i = 1; i <= contagem_escala; i++) {

printf("Tamanho do vetor: %d\n\n", (tamanho*i));


for (j = 0; j < contagem_execucoes; j++) {

for (k = 0; k < (tamanho*i); k++) {

vetor[k] = rand() % 101;

}


inicio = clock();


mergeSort(0, (tamanho*i), vetor);


fim = clock();


tempo_gasto = (double)(fim - inicio) / CLOCKS_PER_SEC;

tempo_medio += tempo_gasto;


printf("Tempo execucao %d: %f\n\n", j + 1, tempo_gasto);

}


tempo_medio /= contagem_execucoes;


printf("Tempo medio: %f\n\n", tempo_medio);

}

}
}
