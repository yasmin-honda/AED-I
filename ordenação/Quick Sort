#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void troca(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

int particionar(int vetor[], int baixo, int alto) {
    int pivo = vetor[alto];  
    int i = (baixo - 1);  

    for (int j = baixo; j <= alto - 1; j++) {
        if (vetor[j] <= pivo) {
            i++;
            troca(&vetor[i], &vetor[j]);
        }
    }
    troca(&vetor[i + 1], &vetor[alto]);
    return (i + 1);
}

void quickSort(int vetor[], int baixo, int alto) {
    if (baixo < alto) {
        int pi = particionar(vetor, baixo, alto);  
        quickSort(vetor, baixo, pi - 1);  
        quickSort(vetor, pi + 1, alto);  
    }
}

int main() {
    const int tamanho = 20000;
    int i, j, k, contagem_execucoes = 3, contagem_escala = 20;
    int vetor[tamanho * contagem_escala];

    clock_t inicio, fim;
    double tempo_gasto = 0, tempo_medio = 0;

    srand(time(NULL));

    for (i = 1; i <= contagem_escala; i++) {
        printf("Tamanho do vetor: %d\n\n", (tamanho * i));
        tempo_medio=0;

        for (j = 0; j < contagem_execucoes; j++) {
            for (k = 0; k < (tamanho * i); k++) {
                vetor[k] = rand() % 101;
            }

            inicio = clock();
            quickSort(vetor, 0, (tamanho * i) - 1);
            fim = clock();

            tempo_gasto = (double)(fim - inicio) / CLOCKS_PER_SEC;
            tempo_medio += tempo_gasto;

            printf("Tempo execução %d: %f\n\n", j + 1, tempo_gasto);
        }
        tempo_medio = tempo_medio/contagem_execucoes;
        printf("Tempo médio: %f\n\n", tempo_medio);
    }

}

